{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","handleCickSort","type","visibleGoods","goods","sort","goodA","goodB","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","isResetVisible","className","cn","onClick","current","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAqCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAMMC,EAAiB,SAACC,GACtBF,EAAYE,IAQRC,EA3CD,SACLC,EADK,GAGJ,IADCL,EACF,EADEA,SAAUH,EACZ,EADYA,WAENO,EAAY,YAAOC,GAmBzB,OAjBAD,EAAaE,MAAK,SAACC,EAAOC,GACxB,OAAQR,GACN,KAAKP,EAASgB,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAASkB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAITf,GACFO,EAAaS,UAGRT,EAoBcU,CACnBpB,EACA,CAAEG,aAAYG,aAGVe,EAAiBf,IAAaP,EAASM,MAAQF,EAErD,OACE,sBAAKmB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEb,KAAK,SACLa,UAAWC,IAAG,iBAAkB,CAC9B,WAAYjB,IAAaP,EAASgB,WAEpCS,QAAS,kBAAMhB,EAAeT,EAASgB,WALzC,iCAUA,wBACEN,KAAK,SACLa,UAAWC,IAAG,oBAAqB,CACjC,WAAYjB,IAAaP,EAASkB,SAEpCO,QAAS,kBAAMhB,EAAeT,EAASkB,SALzC,4BAUA,wBACER,KAAK,SACLa,UAAWC,IAAG,mBAAoB,CAChC,YAAapB,IAEfqB,QAhDmB,WACzBpB,GAAc,SAACqB,GAAD,OAAcA,MA0CxB,qBAUCJ,GACC,wBACEZ,KAAK,SACLa,UAAU,4BACVE,QAjDe,WACvBpB,GAAc,GACdG,EAAYR,EAASM,OA4Cf,sBAWJ,6BACE,6BACGK,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,cC5HrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.81b5979a.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((goodA, goodB) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return goodA.localeCompare(goodB);\n\n      case SortType.LENGTH:\n        return goodA.length - goodB.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const handleClickReverse = () => {\n    setIsReversed((current) => !current);\n  };\n\n  const handleCickSort = (type: SortType) => {\n    setSortType(type);\n  };\n\n  const handleClickReset = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const visibleGoods = getReorderedGoods(\n    goodsFromServer,\n    { isReversed, sortType },\n  );\n\n  const isResetVisible = sortType !== SortType.NONE || isReversed;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n          onClick={() => handleCickSort(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n          onClick={() => handleCickSort(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-danger', {\n            'is-light': !isReversed,\n          })}\n          onClick={handleClickReverse}\n        >\n          Reverse\n        </button>\n\n        {isResetVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleClickReset}\n          >\n            Reset\n          </button>\n        )}\n\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li key={good} data-cy=\"Good\">{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}